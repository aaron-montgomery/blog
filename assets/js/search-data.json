{
  
    
        "post0": {
            "title": "Penney's Game",
            "content": "Penney&#39;s Game . The setup: you&#39;re playing a game with a friend involving coin flips. Both you and your friend choose a sequence of three coin flips; let&#39;s say that you choose THH, and your friend chooses HHT. A neutral referee flips a single coin repeatedly until one of you encouters the sequence you&#39;re waiting for. So, for instance, if the sequence of coin flips is . THTTHTHTHH . then you would win the game, because THH occurred before HHT ever did. The question is: is this a fair game? Or, does one player have an advantage over the other? . The Incorrect Answer . This a great question to trip up some people who know some probability. When I first heard this question, the answer seemed obvious -- of course it&#39;s fair! After all, I knew that in a sequence of of three isolated coin flips, both THH and HHT (and any other sequence of coin flips) had a $ frac 1 2 cdot frac 1 2 cdot frac 1 2 = frac 1 8$ chance of appearing. That claim is of course true, but it&#39;s a little more satisfying to see it with some simulations: . library(ggplot2) library(dplyr) library(tidyr) library(stringr) options(repr.plot.width=10, repr.plot.height=6) . Attaching package: &#39;dplyr&#39; The following objects are masked from &#39;package:stats&#39;: filter, lag The following objects are masked from &#39;package:base&#39;: intersect, setdiff, setequal, union . . replicate(1e5, paste0(sample(c(&quot;H&quot;, &quot;T&quot;), 3, replace = T), collapse = &quot;&quot;)) %&gt;% tibble(sequence = .) %&gt;% arrange(sequence) %&gt;% ggplot(aes(x = sequence)) + geom_bar(stat = &quot;count&quot;) + labs(title = &quot;Monte Carlo simulations of flipping 3 coins&quot;, subtitle = &quot;10,000 total trials&quot;) + theme(text = element_text(size = 20)) . As expected, we encounter each of the 8 distinct sequences with approximately equal frequency, so we haven&#39;t gone astray yet. The problem arises when we try to extend that logic to the actual game described up above; in this case, we&#39;re waiting for one of two sequences to appear instead of just stopping after 3 flips and logging the outcomes. Here are the simulations for the THH vs. HHT game we originally described: . # first in a long sequence of coin flips. penney &lt;- function(p1, p2){ # p1 and p2 are strings like &quot;HHT&quot;, &quot;HTT&quot; p1 &lt;- unlist(str_split(p1, &quot;&quot;)) # split string into vector of length 3 p2 &lt;- unlist(str_split(p2, &quot;&quot;)) flips &lt;- sample(c(&quot;H&quot;, &quot;T&quot;), 3, replace = T) # initialize flips with first 3 coin flips # on each pass of the while loop, push the first two coins forward in the list, # then sample a new coin for the third one; for instance, HTH becomes TH? where # ? is the result of a new coin flip while(!all(p1 == flips) &amp; !all(p2 == flips)){ flips[1:2] &lt;- flips[2:3] flips[3] &lt;- sample(c(&quot;H&quot;, &quot;T&quot;), 1) } ifelse(all(p1 == flips), paste0(p1, collapse = &quot;&quot;), paste0(p2, collapse = &quot;&quot;)) # output winning sequence } . replicate(10000, penney(&quot;HHT&quot;, &quot;THH&quot;)) %&gt;% tibble(winner = .) %&gt;% arrange(winner) %&gt;% ggplot(aes(x = winner)) + geom_bar(stat = &quot;count&quot;) + labs(title = &quot;Monte Carlo simulations of Penney&#39;s Game&quot;, subtitle = &quot;10,000 total trials&quot;) + theme(text = element_text(size = 20)) . It is immediately very clear that this is not a fair game. . The Correct Answer . Once we see that the game is not fair, we should ask why. For these particular two coin flips, there&#39;s a good argument of why HHT should beat THH just one out of four times: the only way that HHT can win is if the first two coin flips are both heads. Otherwise, there&#39;s some first occurrence of two heads in the sequence, and that first occurrence is necessarily preceded by a T. The probability that this occurs is $ frac 1 2 cdot frac 1 2 = frac 1 4$, which is why HHT won about 2500 times out of our 10,000 simulations above. . Now that we see why THH should usually beat HHT, what about all the possible head-to-head matchups? To see, we&#39;ll simulate every possible matchup of all three sequences and generate a heatmap of the results. . # times, and returns the proportion of times the *first* sequence wins penney_wrapper &lt;- function(p1, p2){ mean(replicate(1e4, penney(p1, p2)) == p1) } results &lt;- c(&quot;HHH&quot;, &quot;HHT&quot;, &quot;HTH&quot;, &quot;HTT&quot;, &quot;THH&quot;, &quot;THT&quot;, &quot;TTH&quot;, &quot;TTT&quot;) %&gt;% combn(2) %&gt;% t() %&gt;% as.data.frame() # makes a data frame with all combinations of sequences names(results) &lt;- c(&quot;p1&quot;, &quot;p2&quot;) results &lt;- results %&gt;% rowwise() %&gt;% mutate(p1_wins = penney_wrapper(p1, p2)) %&gt;% mutate(p1_wins = round(p1_wins, 2)) results &lt;- tibble( p1 = results$p2, p2 = results$p1, p1_wins = 1 - results$p1_wins ) %&gt;% bind_rows(results) # since we simulated only half of the matchups, we can just mirror # the results to flip p1 and p2 rather than resimulating results %&gt;% ggplot(aes(x = p1, y = p2, fill = p1_wins)) + geom_tile() + geom_text(aes(label = p1_wins), size = 6) + scale_fill_gradient2(low = &quot;yellow&quot;, mid = &quot;white&quot;, high = &quot;cyan&quot;, midpoint = 0.5) + labs(title = &quot;Head-to-head matchups: Penney&#39;s Game&quot;, subtitle = &quot;10K trials per matchup combination&quot;, fill = &quot;p1 win %&quot;) + theme(text = element_text(size = 20)) . This chart reveals some pretty fascinating truths about Penney&#39;s Game. Here are some of the things we learn: . 1. On the whole, Penney&#39;s Game is certainly not fair. . We can see that some matchups have... . slight advantages, like THH over TTT | moderate advantages, like HHT over TTT | overwhelming advantages, like HTT over TTT | . 2. Yet, fair games do exist within Penney&#39;s Game. . No matter which sequence Player 1 picks, Player 2 can pick something that has a $50 %$ chance of beating it. If the two players of the game want the game to be fair, they can choose in a way to make it so. . 3. Rock-Paper-Scissors . On the other hand, if Player 1 picks their sequence first, then no matter what they have picked, Player 1 can pick something that has an advantage over it. This is almost a probabilistic version of rock-paper-scissors; everything is beaten by something. . If Player 1 picks... Then Player 2 should pick... . HHH | THH | . HHT | THH | . HTH | HHT | . HTT | HHT | . THH | TTH | . THT | TTH | . TTH | HTT | . TTT | HTT | . The easy way to remember what Player 2 should pick is: if Player 1 picks $123$, then Player 2 should pick $ overline 212$, where $ overline 2$ denotes the opposite of $2$. . A logical consequence of this is that there are cycles of things that generally defeat each other. For instance: . HHT usually loses to THH, | which usually loses to TTH, | which usually loses to HTT, | which usually loses to HHT. | . Thus, we have an interesting example of a nontransitive game occurring in the wild. . 4. Not all sequences are created equally . Although every sequence is beaten by something, not every sequence beats something else; TTT and HHH have no advantage over any other sequence. The best case scenario for those sequences is a fair game. . 5. Limits of simulations . This turns out to be a decent advertisement for the limits of simulations (as compared to theoretical approaches) as well. Generally, simulations are quite good at conveying big-picture ideas, like the takeaways we identified above. Yet, simulations are not as well-suited to identifying small differences between things. For instance, the theoretical win probability of HHH over THT is $5/12 approx 0.4167$, and the theoretical win probability of HHH over HTT is $2/5 = 0.40$. (See Further Reading for details.) Yet in the chart above, these two values are close enough that it is not obvious they represent different numbers under the hood. This can be solved with more replications, of course, but that is an expensive solution that scales poorly as numbers get closer together. . To be continued.... . So far, we&#39;ve seen that Penney&#39;s Game is not fair and that it contains a nontransitive game inside it. However, this isn&#39;t the end of the story; even if we remove the competitive aspect of the game and just focus on what happens with one player, the game still doesn&#39;t behave like you might expect. . Further Reading . You can find a theoretically-based explanation of Penney&#39;s Game, along with a chart of exact win probabilities (rather than approximations rendered from simulations), here. .",
            "url": "https://aaron-montgomery.github.io/blog/probability/simulation/monte-carlo/penneys-game/counterintuitive/2022/07/28/penneys-game-1.html",
            "relUrl": "/probability/simulation/monte-carlo/penneys-game/counterintuitive/2022/07/28/penneys-game-1.html",
            "date": " • Jul 28, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Let's Make a Deal!",
            "content": "The Monty Hall Problem . The Monty Hall problem has probably achieved cultural saturation at this point, but we&#39;ll start with a quick refresher: . You are playing a game show in which you are shown three numbered doors (1, 2, 3). One of the doors has a prize behind it; the other two do not. You choose a door -- let&#39;s say door 1, though it doesn&#39;t really matter -- after which the host (Monty Hall) opens door 3 to reveal that it does not have the prize. He then offers you the opportunity to switch from door 1, which you chose, to door 2, the only other remaining door. Should you take his offer to switch? (Does it even matter?) . We should stipulate for the record that we mean the traditional collection of &quot;Monty Hall&quot; rules: that is, Monty will always open one door, he does know where the prize is, and he will never reveal a door that has the prize behind it. If you have chosen the prize correctly on the first guess, then he will flip a coin to decide which of the other doors to reveal. . The Incorrect Answer . I was first exposed to this problem in college when a friend posed the question to me as a brain teaser to at a cafeteria table. I gave the only sensible answer, which was to say that since you had two doors, getting the prize was a 50/50 proposition no matter what you chose. I was, of course, dead wrong. . For years, I was slightly embarrassed about this. Not too embarrassed, mind you -- after all, I&#39;m wrong all the time. But this one stung because my friend was on my home turf; at this point in my life, I was pretty sure I was going to try to pursue a PhD in Mathematics and I suspected I might gravitate to the field of Probability Theory. Just like that, I whiffed on a probability question in a semi-public forum. . My shame was lessened over the years when I learned that if nothing else, I wasn&#39;t alone. When Marilyn Vos Savant gave a correct solution to the problem in a 1990 issue of Parade, she received a truckload of letters, many from professional mathematicians, telling her how wrong she was. (She wasn&#39;t wrong, which certainly didn&#39;t help the outrageous rudeness of some of those letters.) In his book Which Door Has the Cadillac: Adventures of a Real Life Mathematician, Andrew Vazsonyi recalls giving the same incorrect &quot;obvious&quot; answer to the problem on his first encounter; perhaps more shockingly, he details an account of discussing the problem with Paul Erdös, who also got the problem wrong and became increasingly irate about it until he was eventually shown a simulation proving what the right answer should be. . The Correct Answer . That right answer is that switching is better. Indeed, staying with your original choice will grant you a $1/3$ chance of winning, and switching will grant a $2/3$ chance of winning. The key detail, of course, is Monty&#39;s knowledge of the prize location and his choice of exactly how to reveal what he knows. There are many ways to see why this is true; the Wikipedia entry for the Monty Hall problem gives many different explanations of many different flavors (and even criticisms of those same explanations). These explanations are great, but to those who aren&#39;t accustomed to long mathematical arguments, they might be less than convincing. . The first explanation of the solution in the Wikipedia article states: . When the player first makes their choice, there is a $2/3$ chance that the car is behind one of the doors not chosen. This probability does not change after the host reveals a goat behind one of the unchosen doors. . This explanation never quite sat right with me. Sasha Volokh expressed my vague concern quite well: . First, it’s clear that any explanation that says something like “the probability of door 1 was 1/3, and nothing can change that...” is automatically fishy:probabilities are expressions of our ignorance about the world, and new information can change the extent of our ignorance. . This is a case where simulations can do us some good. . Simulations . We&#39;ll write Monte Carlo simulations in R to see that by sticking with our original answer, the probability of winning is indeed $1/3$. We will write a function that simulates one full round of the game; then, we&#39;ll replicate() the function many times to determine the probability of winning. Our strategy will be to simulate a round of the full game many times and keep track of how often the game results in a win. . For our first attempt, we&#39;ll recreate a very general version of the game: . the prize can be found behind any of 3 doors | the contestant will pick any of 3 doors | Monty will reveal one door and offer a chance to switch | the contestant will choose to switch or stay depending on the parameter stay | . library(ggplot2) library(dplyr) library(tidyr) options(repr.plot.width=10, repr.plot.height=6) monty_hall &lt;- function(stay){ doors &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;) # using ABC instead of 123 due to a quirk in sample() prize_door &lt;- sample(doors, 1) contestant_choice &lt;- sample(doors, 1) reveal_door &lt;- # Monty can&#39;t reveal the door with the prize, union(prize_door, contestant_choice) %&gt;% # nor can he reveal the selected door, so we&#39;ll setdiff(doors, .) %&gt;% # remove those choices from the doors vector sample(1) switch_offer &lt;- setdiff(doors, c(contestant_choice, reveal_door)) ifelse(prize_door == ifelse(stay, contestant_choice, switch_offer), &quot;win&quot;, &quot;lose&quot;) # the function returns the strings &quot;win&quot; and &quot;lose&quot; # when stay is TRUE, check to see if the prize door matches the contestant&#39;s choice # when stay is FALSE, check to see if the prize door matches the door offered in a switch } . Next, we&#39;ll generate 10K trials of the game under each of the two options (switching and staying). We&#39;ll reshape the outcomes just a bit and then plot them. . monty_stay_trials &lt;- replicate(10000, monty_hall(stay = TRUE)) monty_switch_trials &lt;- replicate(10000, monty_hall(stay = FALSE)) . data.frame(stay = monty_stay_trials, switch = monty_switch_trials) %&gt;% pivot_longer(everything(), names_to = &quot;choice&quot;, values_to = &quot;outcome&quot;) %&gt;% ggplot(aes(x = outcome)) + geom_bar(stat = &quot;count&quot;) + facet_wrap(~choice) + labs(title = &quot;Monty Hall Monte Carlo simulation results&quot;, subtitle = &quot;10,000 trials per contestent choice possibility&quot;) + theme(text = element_text(size = 20)) . The simulations show us exactly what we expected; switching is good, staying is bad. We can also easily confirm that the probability of winning by switching is $2/3$: . mean(monty_switch_trials == &quot;win&quot;) . 0.6747 Our answer is close to $2/3$, and the difference between it and $2/3$ is a small statistical fluctuation, as expected. . So, good news: we have confirmed that the correct answer is indeed correct. But can we render any deeper insights from this? Let&#39;s focus on the function in the case when stay == TRUE. In that case, the code looks like this: . monty_hall &lt;- function(stay){ doors &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;) prize_door &lt;- sample(doors, 1) contestant_choice &lt;- sample(doors, 1) reveal_door &lt;- union(prize_door, contestant_choice) %&gt;% setdiff(doors, .) %&gt;% sample(1) switch_offer &lt;- setdiff(doors, c(contestant_choice, reveal_door)) ifelse(prize_door == contestant_choice, &quot;win&quot;, &quot;lose&quot;) } . Here, switch_offer doesn&#39;t actually get used at all in the line that returns the function. This means that the switch_offer &lt;- ... line, and the reveal_door &lt;- ... lines, are unused appendages. If we remove them, we&#39;re left with this: . monty_hall &lt;- function(stay){ doors &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;) prize_door &lt;- sample(doors, 1) contestant_choice &lt;- sample(doors, 1) ifelse(prize_door == contestant_choice, &quot;win&quot;, &quot;lose&quot;) } . Now, we see that our code has reduced to a simulation that draws two objects independently from a collection of three and checks to see if they&#39;re the same. That probability is clearly $1/3$, and this explanation now aligns perfectly with the Wikipedia explanation that nothing has changed the original probability of $1/3$, whether that explanation is &quot;fishy&quot; or not. . Takeaway . It&#39;s great to be able to use Monte Carlo simulations to confirm a correct answer, but in this case the act of writing a simulation can do something more profound: it can make the why behind the answer just a bit more convincing. Or, at least, it did that for me. I&#39;ve seen (and believed, and produced) many analytical arguments for why switching has a $2/3$ probability, but I never fully believed the Wikipedia explanation until writing code to simulate the game. .",
            "url": "https://aaron-montgomery.github.io/blog/probability/simulation/monte-carlo/monty-hall/counterintuitive/2022/07/14/monty-hall.html",
            "relUrl": "/probability/simulation/monte-carlo/monty-hall/counterintuitive/2022/07/14/monty-hall.html",
            "date": " • Jul 14, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi! I’m Aaron Montgomery, an Associate Professor at Baldwin Wallace University. I received a PhD in Mathematics (specializing in Probability Theory) in 2013 at the University of Oregon under the direction of David Levin. Since then I have been a member of the BW Mathematics and Statistics faculty, and starting in Fall 2022 I will be the coordinator of the new Data Science and Data Analytics programs. . I am always open to collaborating on interesting statistical or data-oriented projects! You can reach me at amontgom (atsymbol) bw.edu. .",
          "url": "https://aaron-montgomery.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://aaron-montgomery.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}